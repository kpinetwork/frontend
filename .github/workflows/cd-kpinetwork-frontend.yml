name: CD process to deploy frontend project

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    steps:
      - name: Clone and checkout branch
        uses: actions/checkout@master

      - name: Set up Node.js version
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Install dependencies
        run: npm install

      - name: Running tests
        run: npm run test --if-present

      - name: Build project
        run: npm run build

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform Init
        id: init
        env:
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd infrastructure
          terraform init -backend-config="access_key=$TF_VAR_aws_access_key_id" -backend-config="secret_key=$TF_VAR_aws_secret_access_key"
      - name: Terraform Validate
        id: validate
        run: |
          cd infrastructure
          terraform validate -no-color
      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          cd infrastructure
          terraform plan -no-color
        continue-on-error: true
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        env:
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          cd infrastructure
          terraform apply -auto-approve